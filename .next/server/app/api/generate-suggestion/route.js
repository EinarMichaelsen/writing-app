"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generate-suggestion/route";
exports.ids = ["app/api/generate-suggestion/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-suggestion%2Froute&page=%2Fapi%2Fgenerate-suggestion%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-suggestion%2Froute.ts&appDir=%2FUsers%2Feinar%2FDocuments%2FGitHub%2Fwriting-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Feinar%2FDocuments%2FGitHub%2Fwriting-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-suggestion%2Froute&page=%2Fapi%2Fgenerate-suggestion%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-suggestion%2Froute.ts&appDir=%2FUsers%2Feinar%2FDocuments%2FGitHub%2Fwriting-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Feinar%2FDocuments%2FGitHub%2Fwriting-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_einar_Documents_GitHub_writing_app_app_api_generate_suggestion_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/generate-suggestion/route.ts */ \"(rsc)/./app/api/generate-suggestion/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generate-suggestion/route\",\n        pathname: \"/api/generate-suggestion\",\n        filename: \"route\",\n        bundlePath: \"app/api/generate-suggestion/route\"\n    },\n    resolvedPagePath: \"/Users/einar/Documents/GitHub/writing-app/app/api/generate-suggestion/route.ts\",\n    nextConfigOutput,\n    userland: _Users_einar_Documents_GitHub_writing_app_app_api_generate_suggestion_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/generate-suggestion/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZS1zdWdnZXN0aW9uJTJGcm91dGUmcGFnZT0lMkZhcGklMkZnZW5lcmF0ZS1zdWdnZXN0aW9uJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGZ2VuZXJhdGUtc3VnZ2VzdGlvbiUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmVpbmFyJTJGRG9jdW1lbnRzJTJGR2l0SHViJTJGd3JpdGluZy1hcHAlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGZWluYXIlMkZEb2N1bWVudHMlMkZHaXRIdWIlMkZ3cml0aW5nLWFwcCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDOEI7QUFDM0c7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Lz9lMzQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9laW5hci9Eb2N1bWVudHMvR2l0SHViL3dyaXRpbmctYXBwL2FwcC9hcGkvZ2VuZXJhdGUtc3VnZ2VzdGlvbi9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZ2VuZXJhdGUtc3VnZ2VzdGlvbi9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dlbmVyYXRlLXN1Z2dlc3Rpb25cIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2dlbmVyYXRlLXN1Z2dlc3Rpb24vcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvZWluYXIvRG9jdW1lbnRzL0dpdEh1Yi93cml0aW5nLWFwcC9hcHAvYXBpL2dlbmVyYXRlLXN1Z2dlc3Rpb24vcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2dlbmVyYXRlLXN1Z2dlc3Rpb24vcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-suggestion%2Froute&page=%2Fapi%2Fgenerate-suggestion%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-suggestion%2Froute.ts&appDir=%2FUsers%2Feinar%2FDocuments%2FGitHub%2Fwriting-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Feinar%2FDocuments%2FGitHub%2Fwriting-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/generate-suggestion/route.ts":
/*!**********************************************!*\
  !*** ./app/api/generate-suggestion/route.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   maxDuration: () => (/* binding */ maxDuration)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _lib_markdown_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/markdown-utils */ \"(rsc)/./app/lib/markdown-utils.ts\");\n\n\n\n// Set a timeout for the DeepSeek API call - reduced for better responsiveness\nconst TIMEOUT_MS = 3000; // 3 seconds for much faster completions \n// Configure for longer execution in production\nconst maxDuration = 30; // seconds\n// Improved system prompt with special attention to paragraph and sentence structure\nconst SYSTEM_PROMPT = `You are an intelligent writing assistant that provides seamless text continuations like GitHub Copilot or Cursor.\nYour task is to continue the user's text naturally, as if you were completing their thought mid-sentence or starting a new sentence/paragraph if appropriate.\n\nIMPORTANT INSTRUCTIONS:\n- Detect if the user is at the end of a sentence (period, question mark, etc.) or paragraph (double line break) and continue accordingly\n- For incomplete sentences: continue naturally from the exact point where the text ended\n- For complete sentences (ending with period, question mark, etc.): start a new sentence that follows logically \n- For ends of paragraphs: start a new paragraph with a related but slightly different thought\n- Match the user's tone, style, vocabulary, and format precisely\n- Continue with the same subject matter and context as the user's writing\n- Keep completions concise and focused (2-3 sentences at most)\n- Never add commentary, explanations, or annotations`;\n// Specialized prompt for Markdown content with structure awareness\nconst MARKDOWN_PROMPT = `You are an expert writing assistant that continues the user's writing naturally in Markdown format.\n\nCRITICAL INSTRUCTIONS:\n1. Analyze the user's text structure carefully:\n   - If they are mid-sentence, continue that sentence naturally\n   - If they ended with a period/question mark, start a new sentence\n   - If they ended a paragraph, start a new related paragraph\n   - If they were creating a list, continue the list with similar items\n   - If they were writing a heading, continue with body text\n\n2. Continue the user's exact writing content and subject matter\n3. Match their tone, style, and formatting precisely\n4. Maintain the exact same writing quality and complexity\n5. Never write about Markdown itself or explain formatting\n6. Do not add meta-commentary or suggestions\n7. Maintain the same patterns of sentence length and complexity`;\n// Detect sentence and paragraph endings\nfunction analyzeTextStructure(text) {\n    const trimmedText = text.trim();\n    // Check if text ends with common sentence-ending punctuation\n    const endsSentence = /[.!?:]\\s*$/.test(trimmedText);\n    // Check if text ends with a new paragraph marker (double line break, etc.)\n    const endsWithNewline = /\\n\\s*\\n\\s*$/.test(text) || /\\n\\s*$/.test(text);\n    // Check if it's a list item\n    const isList = /^[\\s\\n]*([-*+]|\\d+\\.)\\s/.test(trimmedText.split(\"\\n\").pop() || \"\");\n    // Check if it's a heading\n    const isHeading = /^[\\s\\n]*#{1,6}\\s/.test(trimmedText.split(\"\\n\").pop() || \"\");\n    return {\n        endsSentence,\n        endsWithNewline,\n        isList,\n        isHeading,\n        trimmedText\n    };\n}\n// Configure the DeepSeek client\nfunction getDeepSeekClient() {\n    const apiKey = process.env.DEEPSEEK_API_KEY || \"\";\n    return new openai__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n        apiKey,\n        baseURL: \"https://api.deepseek.com/v1\",\n        timeout: TIMEOUT_MS\n    });\n}\nfunction getDeepSeekModel() {\n    return \"deepseek-chat\"; // Using chat model for best results\n}\nasync function POST(request) {\n    // Add response headers for better performance\n    const headers = {\n        \"Cache-Control\": \"no-store, max-age=0\",\n        \"Connection\": \"keep-alive\"\n    };\n    try {\n        // Check if DeepSeek API key is configured\n        const apiKey = process.env.DEEPSEEK_API_KEY;\n        if (!apiKey) {\n            console.error(\"DeepSeek API key not configured\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                suggestion: \"\",\n                error: \"DeepSeek API key not configured\"\n            }, {\n                status: 500,\n                headers\n            });\n        }\n        // Parse the request body\n        const { text, isMarkdown = false, maxTokens = 15, temperature = 0.1 } = await request.json();\n        // Ensure we have text to work with\n        if (!text || typeof text !== \"string\") {\n            console.error(\"Invalid text input\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                suggestion: \"\",\n                error: \"Invalid text input\"\n            }, {\n                status: 400,\n                headers\n            });\n        }\n        // Extract up to 3000 characters with smarter context handling\n        // Always include the entire last paragraph for better coherence\n        let context = text;\n        if (text.length > 3000) {\n            // Find a good breakpoint (paragraph or sentence)\n            const lastParagraphMatch = text.slice(-3000).match(/(?:\\n\\s*\\n|\\r\\n\\s*\\r\\n)/);\n            const breakPoint = lastParagraphMatch && lastParagraphMatch.index !== undefined ? text.length - 3000 + lastParagraphMatch.index : text.length - 3000;\n            context = text.slice(breakPoint);\n        }\n        // Analyze the text structure for better completions\n        const structure = analyzeTextStructure(context);\n        // Create a DeepSeek client\n        const client = getDeepSeekClient();\n        try {\n            const startTime = Date.now();\n            // Select the appropriate prompt\n            const systemPrompt = isMarkdown ? MARKDOWN_PROMPT : SYSTEM_PROMPT;\n            // Enhance prompt with structure info for better completions\n            let enhancedPrompt = systemPrompt;\n            if (structure.endsSentence) {\n                enhancedPrompt += \"\\n\\nNote: The user's text ends with a complete sentence. Start a new sentence that follows logically.\";\n            } else if (structure.endsWithNewline) {\n                enhancedPrompt += \"\\n\\nNote: The user's text ends with a paragraph. Start a new paragraph with a related thought.\";\n            } else if (structure.isList) {\n                enhancedPrompt += \"\\n\\nNote: The user is writing a list. Continue with another list item in the same format.\";\n            } else if (structure.isHeading) {\n                enhancedPrompt += \"\\n\\nNote: The user just wrote a heading. Continue with body text under that heading.\";\n            } else {\n                enhancedPrompt += \"\\n\\nNote: The user is mid-sentence. Continue that exact sentence naturally.\";\n            }\n            // Generate a completion with optimized parameters for faster response\n            const completion = await client.chat.completions.create({\n                model: getDeepSeekModel(),\n                messages: [\n                    {\n                        role: \"system\",\n                        content: enhancedPrompt\n                    },\n                    {\n                        role: \"user\",\n                        content: context\n                    }\n                ],\n                max_tokens: maxTokens,\n                temperature: temperature,\n                top_p: 0.1,\n                presence_penalty: 0.0,\n                frequency_penalty: 0.0,\n                stream: false\n            });\n            const endTime = Date.now();\n            const timeTaken = endTime - startTime;\n            // Extract the suggestion from the completion\n            let suggestion = completion.choices[0]?.message?.content || \"\";\n            // Minimal cleaning of the suggestion\n            suggestion = suggestion.trim();\n            // Process markdown content appropriately\n            if (isMarkdown) {\n                suggestion = (0,_lib_markdown_utils__WEBPACK_IMPORTED_MODULE_1__.sanitizeMarkdown)(suggestion);\n                // Ensure there are no HTML tags in the markdown suggestion\n                if (suggestion.includes(\"<\") && suggestion.includes(\">\")) {\n                    suggestion = suggestion.replace(/<\\/?[^>]+(>|$)/g, \"\");\n                }\n            } else {\n                // Clean HTML tags from non-HTML content when appropriate\n                if (suggestion.startsWith(\"<p>\") || suggestion.includes(\"</p>\") || suggestion.includes(\"<h\") || suggestion.includes(\"</h\")) {\n                    suggestion = suggestion.replace(/<\\/?[^>]+(>|$)/g, \"\");\n                }\n                // Remove any markdown or code formatting\n                if (suggestion.startsWith(\"```\") && suggestion.includes(\"\\n\")) {\n                    suggestion = suggestion.split(\"\\n\").slice(1).join(\"\\n\");\n                    if (suggestion.endsWith(\"```\")) {\n                        suggestion = suggestion.slice(0, -3).trim();\n                    }\n                }\n            }\n            // Intelligently adjust the suggestion based on context\n            // If text ends with space and suggestion starts with space, remove one\n            if (text.endsWith(\" \") && suggestion.startsWith(\" \")) {\n                suggestion = suggestion.substring(1);\n            }\n            // If text doesn't end with space and suggestion doesn't start with punctuation, add space\n            if (!text.endsWith(\" \") && !suggestion.startsWith(\".\") && !suggestion.startsWith(\",\") && !suggestion.startsWith(\"!\") && !suggestion.startsWith(\"?\") && !suggestion.startsWith(\":\") && !suggestion.startsWith(\";\") && !suggestion.startsWith(\")\") && !text.endsWith(\"\\n\") && suggestion.length > 0) {\n                suggestion = \" \" + suggestion;\n            }\n            // Return the suggestion with timing info\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                suggestion,\n                timeTaken,\n                analysis: {\n                    endsSentence: structure.endsSentence,\n                    endsWithNewline: structure.endsWithNewline,\n                    isList: structure.isList,\n                    isHeading: structure.isHeading\n                }\n            }, {\n                headers\n            });\n        } catch (error) {\n            // Handle errors with consistent response formatting\n            console.error(\"Error generating completion:\", error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                suggestion: \"\",\n                error: error.message || \"Failed to generate suggestion\",\n                status: error.status || 500\n            }, {\n                status: error.status || 500,\n                headers\n            });\n        }\n    } catch (error) {\n        console.error(\"Error processing request:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            suggestion: \"\",\n            error: \"Internal server error\"\n        }, {\n            status: 500,\n            headers\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/generate-suggestion/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/lib/markdown-utils.ts":
/*!***********************************!*\
  !*** ./app/lib/markdown-utils.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateMarkdownFromNode: () => (/* binding */ generateMarkdownFromNode),\n/* harmony export */   sanitizeMarkdown: () => (/* binding */ sanitizeMarkdown)\n/* harmony export */ });\n/**\n * Converts a TipTap document node to Markdown\n * This is a simplified version that focuses on common elements\n */ function generateMarkdownFromNode(doc) {\n    let markdown = \"\";\n    doc.descendants((node, pos, parent)=>{\n        // Handle different node types\n        if (node.type.name === \"paragraph\") {\n            const content = node.textContent;\n            if (content) {\n                markdown += content + \"\\n\\n\";\n            }\n            return false // Don't traverse children, we got the text\n            ;\n        }\n        // Handle headings\n        if (node.type.name === \"heading\") {\n            const level = node.attrs.level;\n            const content = node.textContent;\n            const prefix = \"#\".repeat(level) + \" \";\n            markdown += prefix + content + \"\\n\\n\";\n            return false;\n        }\n        // Handle bulletLists\n        if (node.type.name === \"bulletList\") {\n            // We'll handle list items individually\n            return true // Continue traversing\n            ;\n        }\n        // Handle orderedLists\n        if (node.type.name === \"orderedList\") {\n            // We'll handle list items individually  \n            return true // Continue traversing\n            ;\n        }\n        // Handle listItem\n        if (node.type.name === \"listItem\") {\n            let content = node.textContent;\n            // Check if parent is bulletList or orderedList\n            if (parent?.type.name === \"bulletList\") {\n                markdown += \"- \" + content + \"\\n\";\n            } else if (parent?.type.name === \"orderedList\") {\n                // Since we don't have item index, use 1 for all\n                markdown += \"1. \" + content + \"\\n\";\n            }\n            return false;\n        }\n        // Handle blockquote\n        if (node.type.name === \"blockquote\") {\n            const content = node.textContent;\n            markdown += \"> \" + content + \"\\n\\n\";\n            return false;\n        }\n        // Handle code blocks\n        if (node.type.name === \"codeBlock\") {\n            const content = node.textContent;\n            const language = node.attrs.language || \"\";\n            markdown += \"```\" + language + \"\\n\" + content + \"\\n```\\n\\n\";\n            return false;\n        }\n        // Handle horizontal rule\n        if (node.type.name === \"horizontalRule\") {\n            markdown += \"---\\n\\n\";\n            return false;\n        }\n        return true // Continue traversing \n        ;\n    });\n    return markdown.trim();\n}\n/**\n * Sanitizes markdown for use in completions\n */ function sanitizeMarkdown(markdown) {\n    // Remove any potential code block wrappers from the AI response\n    if (markdown.startsWith(\"```\") && markdown.includes(\"\\n\")) {\n        const lines = markdown.split(\"\\n\");\n        const firstLine = lines[0];\n        // If first line is just ``` or ```language, remove it\n        if (firstLine.match(/^```[a-z]*$/)) {\n            lines.shift();\n        }\n        // If last line is just ```, remove it\n        if (lines[lines.length - 1] === \"```\") {\n            lines.pop();\n        }\n        return lines.join(\"\\n\");\n    }\n    return markdown;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU96QjtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL2FwcC9saWIvbWFya2Rvd24tdXRpbHMudHM/OGIyMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlIH0gZnJvbSAnQHRpcHRhcC9wbS9tb2RlbCdcblxuLyoqXG4gKiBDb252ZXJ0cyBhIFRpcFRhcCBkb2N1bWVudCBub2RlIHRvIE1hcmtkb3duXG4gKiBUaGlzIGlzIGEgc2ltcGxpZmllZCB2ZXJzaW9uIHRoYXQgZm9jdXNlcyBvbiBjb21tb24gZWxlbWVudHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlTWFya2Rvd25Gcm9tTm9kZShkb2M6IE5vZGUpOiBzdHJpbmcge1xuICBsZXQgbWFya2Rvd24gPSAnJ1xuICBcbiAgZG9jLmRlc2NlbmRhbnRzKChub2RlLCBwb3MsIHBhcmVudCkgPT4ge1xuICAgIC8vIEhhbmRsZSBkaWZmZXJlbnQgbm9kZSB0eXBlc1xuICAgIGlmIChub2RlLnR5cGUubmFtZSA9PT0gJ3BhcmFncmFwaCcpIHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBub2RlLnRleHRDb250ZW50XG4gICAgICBpZiAoY29udGVudCkge1xuICAgICAgICBtYXJrZG93biArPSBjb250ZW50ICsgJ1xcblxcbidcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZSAvLyBEb24ndCB0cmF2ZXJzZSBjaGlsZHJlbiwgd2UgZ290IHRoZSB0ZXh0XG4gICAgfVxuICAgIFxuICAgIC8vIEhhbmRsZSBoZWFkaW5nc1xuICAgIGlmIChub2RlLnR5cGUubmFtZSA9PT0gJ2hlYWRpbmcnKSB7XG4gICAgICBjb25zdCBsZXZlbCA9IG5vZGUuYXR0cnMubGV2ZWxcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBub2RlLnRleHRDb250ZW50XG4gICAgICBjb25zdCBwcmVmaXggPSAnIycucmVwZWF0KGxldmVsKSArICcgJ1xuICAgICAgXG4gICAgICBtYXJrZG93biArPSBwcmVmaXggKyBjb250ZW50ICsgJ1xcblxcbidcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBcbiAgICAvLyBIYW5kbGUgYnVsbGV0TGlzdHNcbiAgICBpZiAobm9kZS50eXBlLm5hbWUgPT09ICdidWxsZXRMaXN0Jykge1xuICAgICAgLy8gV2UnbGwgaGFuZGxlIGxpc3QgaXRlbXMgaW5kaXZpZHVhbGx5XG4gICAgICByZXR1cm4gdHJ1ZSAvLyBDb250aW51ZSB0cmF2ZXJzaW5nXG4gICAgfVxuICAgIFxuICAgIC8vIEhhbmRsZSBvcmRlcmVkTGlzdHNcbiAgICBpZiAobm9kZS50eXBlLm5hbWUgPT09ICdvcmRlcmVkTGlzdCcpIHtcbiAgICAgIC8vIFdlJ2xsIGhhbmRsZSBsaXN0IGl0ZW1zIGluZGl2aWR1YWxseSAgXG4gICAgICByZXR1cm4gdHJ1ZSAvLyBDb250aW51ZSB0cmF2ZXJzaW5nXG4gICAgfVxuICAgIFxuICAgIC8vIEhhbmRsZSBsaXN0SXRlbVxuICAgIGlmIChub2RlLnR5cGUubmFtZSA9PT0gJ2xpc3RJdGVtJykge1xuICAgICAgbGV0IGNvbnRlbnQgPSBub2RlLnRleHRDb250ZW50XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGlmIHBhcmVudCBpcyBidWxsZXRMaXN0IG9yIG9yZGVyZWRMaXN0XG4gICAgICBpZiAocGFyZW50Py50eXBlLm5hbWUgPT09ICdidWxsZXRMaXN0Jykge1xuICAgICAgICBtYXJrZG93biArPSAnLSAnICsgY29udGVudCArICdcXG4nXG4gICAgICB9IGVsc2UgaWYgKHBhcmVudD8udHlwZS5uYW1lID09PSAnb3JkZXJlZExpc3QnKSB7XG4gICAgICAgIC8vIFNpbmNlIHdlIGRvbid0IGhhdmUgaXRlbSBpbmRleCwgdXNlIDEgZm9yIGFsbFxuICAgICAgICBtYXJrZG93biArPSAnMS4gJyArIGNvbnRlbnQgKyAnXFxuJ1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgXG4gICAgLy8gSGFuZGxlIGJsb2NrcXVvdGVcbiAgICBpZiAobm9kZS50eXBlLm5hbWUgPT09ICdibG9ja3F1b3RlJykge1xuICAgICAgY29uc3QgY29udGVudCA9IG5vZGUudGV4dENvbnRlbnRcbiAgICAgIG1hcmtkb3duICs9ICc+ICcgKyBjb250ZW50ICsgJ1xcblxcbidcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBcbiAgICAvLyBIYW5kbGUgY29kZSBibG9ja3NcbiAgICBpZiAobm9kZS50eXBlLm5hbWUgPT09ICdjb2RlQmxvY2snKSB7XG4gICAgICBjb25zdCBjb250ZW50ID0gbm9kZS50ZXh0Q29udGVudFxuICAgICAgY29uc3QgbGFuZ3VhZ2UgPSBub2RlLmF0dHJzLmxhbmd1YWdlIHx8ICcnXG4gICAgICBcbiAgICAgIG1hcmtkb3duICs9ICdgYGAnICsgbGFuZ3VhZ2UgKyAnXFxuJyArIGNvbnRlbnQgKyAnXFxuYGBgXFxuXFxuJ1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIFxuICAgIC8vIEhhbmRsZSBob3Jpem9udGFsIHJ1bGVcbiAgICBpZiAobm9kZS50eXBlLm5hbWUgPT09ICdob3Jpem9udGFsUnVsZScpIHtcbiAgICAgIG1hcmtkb3duICs9ICctLS1cXG5cXG4nXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHRydWUgLy8gQ29udGludWUgdHJhdmVyc2luZyBcbiAgfSlcbiAgXG4gIHJldHVybiBtYXJrZG93bi50cmltKClcbn1cblxuLyoqXG4gKiBTYW5pdGl6ZXMgbWFya2Rvd24gZm9yIHVzZSBpbiBjb21wbGV0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVNYXJrZG93bihtYXJrZG93bjogc3RyaW5nKTogc3RyaW5nIHtcbiAgLy8gUmVtb3ZlIGFueSBwb3RlbnRpYWwgY29kZSBibG9jayB3cmFwcGVycyBmcm9tIHRoZSBBSSByZXNwb25zZVxuICBpZiAobWFya2Rvd24uc3RhcnRzV2l0aCgnYGBgJykgJiYgbWFya2Rvd24uaW5jbHVkZXMoJ1xcbicpKSB7XG4gICAgY29uc3QgbGluZXMgPSBtYXJrZG93bi5zcGxpdCgnXFxuJylcbiAgICBjb25zdCBmaXJzdExpbmUgPSBsaW5lc1swXVxuICAgIFxuICAgIC8vIElmIGZpcnN0IGxpbmUgaXMganVzdCBgYGAgb3IgYGBgbGFuZ3VhZ2UsIHJlbW92ZSBpdFxuICAgIGlmIChmaXJzdExpbmUubWF0Y2goL15gYGBbYS16XSokLykpIHtcbiAgICAgIGxpbmVzLnNoaWZ0KClcbiAgICB9XG4gICAgXG4gICAgLy8gSWYgbGFzdCBsaW5lIGlzIGp1c3QgYGBgLCByZW1vdmUgaXRcbiAgICBpZiAobGluZXNbbGluZXMubGVuZ3RoIC0gMV0gPT09ICdgYGAnKSB7XG4gICAgICBsaW5lcy5wb3AoKVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gbGluZXMuam9pbignXFxuJylcbiAgfVxuICBcbiAgcmV0dXJuIG1hcmtkb3duXG59ICJdLCJuYW1lcyI6WyJnZW5lcmF0ZU1hcmtkb3duRnJvbU5vZGUiLCJkb2MiLCJtYXJrZG93biIsImRlc2NlbmRhbnRzIiwibm9kZSIsInBvcyIsInBhcmVudCIsInR5cGUiLCJuYW1lIiwiY29udGVudCIsInRleHRDb250ZW50IiwibGV2ZWwiLCJhdHRycyIsInByZWZpeCIsInJlcGVhdCIsImxhbmd1YWdlIiwidHJpbSIsInNhbml0aXplTWFya2Rvd24iLCJzdGFydHNXaXRoIiwiaW5jbHVkZXMiLCJsaW5lcyIsInNwbGl0IiwiZmlyc3RMaW5lIiwibWF0Y2giLCJzaGlmdCIsImxlbmd0aCIsInBvcCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/lib/markdown-utils.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/formdata-node","vendor-chunks/next","vendor-chunks/tr46","vendor-chunks/openai","vendor-chunks/web-streams-polyfill","vendor-chunks/@opentelemetry","vendor-chunks/node-fetch","vendor-chunks/whatwg-url","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/form-data-encoder","vendor-chunks/webidl-conversions","vendor-chunks/abort-controller","vendor-chunks/ms","vendor-chunks/humanize-ms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenerate-suggestion%2Froute&page=%2Fapi%2Fgenerate-suggestion%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-suggestion%2Froute.ts&appDir=%2FUsers%2Feinar%2FDocuments%2FGitHub%2Fwriting-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Feinar%2FDocuments%2FGitHub%2Fwriting-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();