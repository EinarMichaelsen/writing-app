"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/editor/[id]/page",{

/***/ "(app-pages-browser)/./lib/deepseek-config.ts":
/*!********************************!*\
  !*** ./lib/deepseek-config.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateSuggestion: function() { return /* binding */ generateSuggestion; },\n/* harmony export */   getDeepSeekClient: function() { return /* binding */ getDeepSeekClient; },\n/* harmony export */   getDeepSeekModel: function() { return /* binding */ getDeepSeekModel; },\n/* harmony export */   isDeepSeekConfigured: function() { return /* binding */ isDeepSeekConfigured; }\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(app-pages-browser)/./node_modules/openai/index.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n/**\n * Creates and returns an OpenAI compatible client configured for DeepSeek\n */ function getDeepSeekClient() {\n    const apiKey = process.env.DEEPSEEK_API_KEY;\n    if (!apiKey) {\n        throw new Error(\"DEEPSEEK_API_KEY is not set in environment variables\");\n    }\n    return new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n        apiKey,\n        baseURL: \"https://api.deepseek.com/v1\",\n        timeout: 15000,\n        maxRetries: 1\n    });\n}\n/**\n * Checks if DeepSeek is configured by testing the API key\n */ async function isDeepSeekConfigured() {\n    try {\n        // Use relative URL for API calls to ensure they work in all environments\n        const baseUrl =  true ? window.location.origin : 0;\n        const url = \"\".concat(baseUrl, \"/api/test-deepseek\");\n        // We'll use a much shorter timeout for configuration checks\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), 5000); // 5 second timeout\n        try {\n            const response = await fetch(url, {\n                method: \"GET\",\n                headers: {\n                    \"Cache-Control\": \"no-cache\"\n                },\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) return false;\n            const data = await response.json();\n            return data.configured;\n        } catch (error) {\n            // If this fails, we'll assume DeepSeek isn't configured\n            return false;\n        } finally{\n            clearTimeout(timeoutId);\n        }\n    } catch (error) {\n        console.error(\"Error checking DeepSeek configuration:\", error);\n        return false;\n    }\n}\n/**\n * Fetches with retry logic\n */ async function fetchWithRetry(url, options) {\n    let retries = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2, backoff = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 300, timeout = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 8000;\n    // Create a new abort controller for each attempt\n    const controller = new AbortController();\n    // Create a merged signal if the options already had one\n    const originalSignal = options.signal;\n    options.signal = controller.signal;\n    // Set up the timeout\n    const timeoutId = setTimeout(()=>controller.abort(), timeout);\n    // If the original signal aborts, we should abort too\n    const signalListener = ()=>{\n        controller.abort();\n        clearTimeout(timeoutId);\n    };\n    if (originalSignal) {\n        originalSignal.addEventListener(\"abort\", signalListener);\n    }\n    try {\n        const response = await fetch(url, options);\n        // Clean up\n        clearTimeout(timeoutId);\n        if (originalSignal) {\n            originalSignal.removeEventListener(\"abort\", signalListener);\n        }\n        // Only retry on 5xx server errors and network/timeout failures\n        if (!response.ok && response.status >= 500 && retries > 0) {\n            // Wait with exponential backoff before retrying\n            await new Promise((resolve)=>setTimeout(resolve, backoff));\n            return fetchWithRetry(url, options, retries - 1, backoff * 2, timeout);\n        }\n        return response;\n    } catch (error) {\n        // Clean up\n        clearTimeout(timeoutId);\n        if (originalSignal) {\n            originalSignal.removeEventListener(\"abort\", signalListener);\n        }\n        if ((error instanceof TypeError || error.name === \"AbortError\") && retries > 0) {\n            // Network error or timeout - retry with exponential backoff\n            await new Promise((resolve)=>setTimeout(resolve, backoff));\n            return fetchWithRetry(url, options, retries - 1, backoff * 2, timeout);\n        }\n        throw error;\n    }\n}\n/**\n * Generates a suggestion using DeepSeek API\n */ async function generateSuggestion(text) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    var _options_maxRetries;\n    const maxRetries = (_options_maxRetries = options.maxRetries) !== null && _options_maxRetries !== void 0 ? _options_maxRetries : 2;\n    var _options_timeout;\n    const timeout = (_options_timeout = options.timeout) !== null && _options_timeout !== void 0 ? _options_timeout : 8000; // 8 second default timeout\n    try {\n        // Use relative URL for API calls to ensure they work in all environments\n        const baseUrl =  true ? window.location.origin : 0;\n        const url = \"\".concat(baseUrl, \"/api/generate-suggestion\");\n        // Set up the main controller for the overall operation\n        const controller = new AbortController();\n        // Generate a very minimal context to avoid long processing times\n        // Just use the last few words as context\n        const words = text.split(/\\s+/);\n        const lastWords = words.slice(-10).join(\" \");\n        const response = await fetchWithRetry(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                text: lastWords,\n                maxTokens: options.maxTokens || 15,\n                temperature: options.temperature || 0.7\n            }),\n            signal: controller.signal\n        }, maxRetries, 300, timeout // Use the timeout from options or default\n        );\n        // Handle error responses\n        if (!response.ok) {\n            // If we got a 504, throw a specific timeout error\n            if (response.status === 504) {\n                throw new Error(\"Request timed out. The API may be overloaded.\");\n            }\n            let errorData;\n            try {\n                errorData = await response.json();\n            } catch (e) {\n                errorData = {\n                    error: \"Server error: \".concat(response.status)\n                };\n            }\n            // If we get an authentication error but we have text, generate a simple fallback\n            if (response.status === 401 && lastWords) {\n                console.log(\"Authentication error, using simple client-side fallback\");\n                // Return a simple continuation based on the last word\n                return \"\".concat(lastWords.split(\" \").pop(), \" ...\");\n            }\n            throw new Error(errorData.error || \"Failed to generate suggestion: \".concat(response.status));\n        }\n        const data = await response.json();\n        if (data.fallback) {\n            console.log(\"Server used fallback generation\");\n        }\n        return data.suggestion || \"\";\n    } catch (error) {\n        var _error_message, _error_message1;\n        console.error(\"Error generating suggestion:\", error);\n        // For timeout errors, try to provide a simple fallback rather than failing\n        if (error.name === \"AbortError\" || ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"timed out\")) || ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes(\"504\"))) {\n            if (text) {\n                // Return a very simple continuation based on the last word if possible\n                const lastWord = text.split(/\\s+/).pop() || \"\";\n                if (lastWord.length > 2) {\n                    return \"\".concat(lastWord, \" ...\");\n                }\n            }\n        }\n        throw error;\n    }\n}\n/**\n * Returns the DeepSeek model name\n */ function getDeepSeekModel() {\n    let modelName = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"deepseek-chat\";\n    return modelName;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/deepseek-config.ts\n"));

/***/ })

});